{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","features/activities/dashboard/ActivityFilters.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityListItemPlaceHolder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/options/categoryOptions.ts","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedChats.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestError.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/common/util/hooks.ts","features/users/RegisterSuccess.tsx","features/users/ConfirmEmail.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","sleep","delay","Promise","resolve","setTimeout","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","startsWith","userStore","logout","setServerError","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","fbLogin","accessToken","refreshToken","verifyEmail","email","resendEmailConfirm","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","predicate","listActivities","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","axiosParams","result","setActivity","setPagination","setLoadingInitial","console","log","loadActivity","getActivity","isGoing","attendees","some","isHost","hostUsername","host","find","x","Date","state","createActivity","attendee","newActivity","runInAction","updateActivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","updateAttendeeFollowing","following","followersCount","clearSelectedActivity","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","ProfileStore","loadingProfile","uploading","followings","loadingFollowings","activeTab","userActivities","loadingActivities","setActiveTab","loadProfile","photo","photos","isMain","setImage","p","setDisplayName","activityStore","followingCount","loadFollowings","loadUserActivities","UserStore","fbAccessToken","fbLoading","refreshTokenTimeout","creds","setToken","startRefreshTokenTimer","modalStore","closeModal","window","localStorage","removeItem","getUser","name","getFacebookLoginStatus","FB","getLoginStatus","authResponse","facebookLogin","apiLogin","catch","scope","stopRefreshTokenTimer","jwtToken","atob","split","timeout","exp","getDate","now","clearTimeout","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","isLoggedIn","Menu","inverted","fixed","Container","Item","as","NavLink","to","exact","header","src","alt","style","marginRight","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","MyTextInput","props","useField","field","meta","Form","Field","touched","label","Label","basic","color","initialValues","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","Header","textAlign","placeholder","type","render","marginBottom","fluid","ValidationErrors","Message","List","map","err","i","validationSchema","Yup","required","isValid","dirty","disabled","Segment","vertical","size","Divider","horizontal","width","marginTop","attached","active","has","onChange","Reveal","animated","Content","visible","hidden","e","preventDefault","handleFollow","Card","Description","str","length","substring","truncate","bio","extra","Icon","FollowButton","styles","borderColor","borderWidth","Popup","hoverable","trigger","circular","bordered","ActivityListItem","Group","secondary","clearing","floated","groupedActivities","group","sub","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","LoadingComponent","Dimmer","MyTextArea","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","categoryOptions","MyDateInput","selected","useHistory","useParams","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","verticalAlign","relaxed","divided","Extra","GridColumn","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","Modal","onClose","setEditMode","isCurrentUser","Tab","Pane","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","itemsPerRow","objectFit","Meta","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","disable","addPhotoMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","menuPosition","Statistic","PrivateRoute","Component","component","rest","useQuery","useLocation","search","RegisterSuccess","success","ConfirmEmail","Status","setStatus","handleConfirmEmailResend","getBody","location","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.5b7b7ebd.chunk.js","sourcesContent":["export interface Pagination {\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T> {\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data: T, pagination: Pagination) {\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams {\r\n    pageNumber;\r\n    pageSize;\r\n\r\n    constructor(pageNumber = 1, pageSize = 2 ) {\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n}","import axios, { AxiosError, AxiosResponse } from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport { history } from '../..';\r\nimport { Activity, ActivityFormValues } from '../models/activity';\r\nimport { PaginatedResult } from '../models/pagination';\r\nimport { Photo, Profile, UserActivity } from '../models/profile';\r\nimport { User, UserFormValues } from '../models/user';\r\nimport { store } from '../stores/store';\r\n\r\nconst sleep = (delay: number) => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay)\r\n    })\r\n}\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\naxios.interceptors.request.use(config => {\r\n    const token = store.commonStore.token;\r\n    if (token) config.headers.Authorization = `Bearer ${token}`\r\n    return config;\r\n})\r\n\r\naxios.interceptors.response.use(async response => {\r\n    if (process.env.NODE_ENV === 'development') await sleep(1000);\r\n    await sleep(1000);\r\n    const pagination = response.headers['pagination'];\r\n    if (pagination) {\r\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\r\n        return response as AxiosResponse<PaginatedResult<any>>\r\n    }\r\n    return response;\r\n}, (error: AxiosError) => {\r\n    const { data, status, config, headers } = error.response!;\r\n    switch (status) {\r\n        case 400:\r\n            if(typeof data === 'string') {\r\n                toast.error(data);\r\n            }\r\n            if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\r\n                history.push('/not-found');\r\n            }\r\n            if (data.errors) {\r\n                const modalStateErrors = [];\r\n                for (const key in data.errors) {\r\n                    if (data.errors[key]) {\r\n                        modalStateErrors.push(data.errors[key])\r\n                    }\r\n                }\r\n                throw modalStateErrors.flat();\r\n            } else {\r\n                toast.error(data);\r\n            }\r\n            break;\r\n        case 401:\r\n            if (status === 401 && headers['www-authenticate'].startsWith('Bearer error=\"invalid_token\"')) {\r\n                store.userStore.logout();\r\n                toast.error('Session expired - please login again');\r\n            }\r\n            break;\r\n        case 404:\r\n            history.push('/not-found')\r\n            break;\r\n        case 500:\r\n            store.commonStore.setServerError(data);\r\n            history.push('/server-error');\r\n            break;\r\n    }\r\n    return Promise.reject(error);\r\n})\r\n\r\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\r\n\r\nconst requests = {\r\n    get: <T>(url: string) => axios.get<T>(url).then(responseBody),\r\n    post: <T>(url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\r\n    put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n    del: <T>(url: string) => axios.delete<T>(url).then(responseBody),\r\n}\r\n\r\nconst Activities = {\r\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', {params})\r\n        .then(responseBody),\r\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\r\n    create: (activity: ActivityFormValues) => requests.post<void>('/activities', activity),\r\n    update: (activity: ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`, activity),\r\n    delete: (id: string) => requests.del<void>(`/activities/${id}`),\r\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {})\r\n}\r\n\r\nconst Account = {\r\n    current: () => requests.get<User>('/account'),\r\n    login: (user: UserFormValues) => requests.post<User>('/account/login', user),\r\n    register: (user: UserFormValues) => requests.post<User>('/account/register', user),\r\n    fbLogin: (accessToken: string) => requests\r\n        .post<User>(`/account/fbLogin?accessToken=${accessToken}`, {}),\r\n    refreshToken: () => requests.post<User>('/account/refreshToken', {}),\r\n    verifyEmail: (token: string, email: string) =>\r\n        requests.post<void>(`/account/verifyEmail?token=${token}&email=${email}`, {}),\r\n    resendEmailConfirm: (email: string) =>\r\n        requests.get(`/account/resendEmailConfirmationLink?email=${email}`)\r\n}\r\n\r\nconst Profiles = {\r\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\r\n    uploadPhoto: (file: Blob) => {\r\n        let formData = new FormData();\r\n        formData.append('File', file);\r\n        return axios.post<Photo>('photos', formData, {\r\n            headers: {'Content-type': 'multipart/form-data'}\r\n        })\r\n    },\r\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\r\n    deletePhoto: (id: string) => requests.del(`/photos/${id}`),\r\n    updateProfile: (profile: Partial<Profile>) => requests.put(`/profiles`, profile),\r\n    updateFollowing: (username: string) => requests.post(`/follow/${username}`, {}),\r\n    listFollowings: (username: string, predicate: string) =>\r\n        requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\r\n    listActivities: (username: string, predicate: string) =>\r\n        requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)\r\n}\r\n\r\nconst agent = {\r\n    Activities,\r\n    Account,\r\n    Profiles\r\n}\r\n\r\nexport default agent;","import { Profile } from \"./profile\";\r\n\r\nexport interface Activity {\r\n        id: string;\r\n        title: string;\r\n        date: Date | null;\r\n        description: string;\r\n        category: string;\r\n        city: string;\r\n        venue: string;\r\n        hostUsername: string;\r\n        isCancelled: boolean;\r\n        isGoing: boolean;\r\n        isHost: boolean;\r\n        host?: Profile;\r\n        attendees: Profile[]\r\n    }\r\n\r\n    export class Activity implements Activity {\r\n        constructor(init?: ActivityFormValues) {\r\n            Object.assign(this, init)\r\n        }\r\n    }\r\n\r\n    export class ActivityFormValues {\r\n        id?: string = undefined;\r\n        title: string = '';\r\n        category: string = '';\r\n        description: string = '';\r\n        date: Date | null = null;\r\n        city: string = '';\r\n        venue: string = '';\r\n\r\n        constructor(activity?: ActivityFormValues) {\r\n            if (activity) {\r\n                this.id = activity.id;\r\n                this.title = activity.title;\r\n                this.category = activity.category;\r\n                this.description = activity.description;\r\n                this.date = activity.date;\r\n                this.venue = activity.venue;\r\n                this.city = activity.city;\r\n            }\r\n        }\r\n    }","import { User } from \"./user\";\r\n\r\nexport interface Profile {\r\n    username: string;\r\n    displayName: string;\r\n    image?: string;\r\n    bio?: string;\r\n    followersCount: number;\r\n    followingCount: number;\r\n    following: boolean;\r\n    photos?: Photo[];\r\n}\r\n\r\nexport class Profile implements Profile {\r\n    constructor(user: User) {\r\n        this.username = user.username;\r\n        this.displayName = user.displayName;\r\n        this.image = user.image;\r\n    }\r\n}\r\n\r\nexport interface Photo {\r\n    id: string;\r\n    url: string;\r\n    isMain: boolean;\r\n\r\n}\r\n\r\nexport interface UserActivity {\r\n    id: string;\r\n    title: string;\r\n    category: string;\r\n    date: Date;\r\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\";\r\nimport {format} from 'date-fns';\r\nimport { store } from \"./store\";\r\nimport { Profile } from \"../models/profile\";\r\nimport { Pagination, PagingParams } from '../models/pagination';\r\n\r\nexport default class ActivityStore {\r\n    activityRegistry = new Map<string, Activity>();\r\n    selectedActivity: Activity | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n    pagination: Pagination | null = null;\r\n    pagingParams = new PagingParams();\r\n    predicate = new Map().set('all', true);\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.predicate.keys(),\r\n            () => {\r\n                this.pagingParams = new PagingParams();\r\n                this.activityRegistry.clear();\r\n                this.loadActivities();\r\n            }\r\n        )\r\n    }\r\n\r\n    setPagingParams = (pagingParams: PagingParams) => {\r\n        this.pagingParams = pagingParams;\r\n    }\r\n\r\n    setPredicate = (predicate: string, value: string | Date) => {\r\n        const resetPredicate = () => {\r\n            this.predicate.forEach((value, key) => {\r\n                if (key !== 'startDate') this.predicate.delete(key);\r\n            })\r\n        }\r\n        switch (predicate) {\r\n            case 'all':\r\n                resetPredicate();\r\n                this.predicate.set('all', true);\r\n                break;\r\n            case 'isGoing':\r\n                resetPredicate();\r\n                this.predicate.set('isGoing', true);\r\n                break;\r\n            case 'isHost':\r\n                resetPredicate();\r\n                this.predicate.set('isHost', true);\r\n                break;\r\n            case 'startDate':\r\n                this.predicate.delete('startDate');\r\n                this.predicate.set('startDate', value);\r\n        }\r\n    }\r\n\r\n    get axiosParams() {\r\n        const params = new URLSearchParams();\r\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this.pagingParams.pageSize.toString());\r\n        this.predicate.forEach((value, key) => {\r\n            if (key === 'startDate') {\r\n                params.append(key, (value as Date).toISOString())\r\n            } else {\r\n                params.append(key, value);\r\n            }\r\n        })\r\n        return params;\r\n    }\r\n\r\n    get activitiesByDate() {\r\n        return Array.from(this.activityRegistry.values()).sort((a, b) =>\r\n            a.date!.getTime() - b.date!.getTime());\r\n    }\r\n\r\n    get groupedActivities() {\r\n        return Object.entries(\r\n            this.activitiesByDate.reduce((activities, activity) => {\r\n                const date = format(activity.date!, 'dd MMM yyyy');\r\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\r\n                return activities;\r\n            }, {} as {[key: string]: Activity[]})\r\n        )\r\n    }\r\n\r\n    loadActivities = async () => {\r\n        this.loadingInitial = true;\r\n        try {\r\n            const result = await agent.Activities.list(this.axiosParams);\r\n            result.data.forEach(activity => {\r\n                this.setActivity(activity);\r\n            })  \r\n            this.setPagination(result.pagination);\r\n            this.setLoadingInitial(false);\r\n        } catch (error) {\r\n            console.log(error); \r\n            this.setLoadingInitial(false);\r\n        }\r\n    }\r\n\r\n    setPagination = (pagination: Pagination) => {\r\n        this.pagination = pagination;\r\n    }\r\n\r\n    loadActivity = async (id: string) => {\r\n        let activity = this.getActivity(id);\r\n        if (activity) {\r\n            this.selectedActivity = activity;\r\n            return activity;\r\n        } else {\r\n            this.loadingInitial = true;\r\n            try {\r\n                activity = await agent.Activities.details(id);\r\n                this.setActivity(activity);\r\n                this.selectedActivity = activity;\r\n                this.setLoadingInitial(false);\r\n            } catch (error) {\r\n                console.log(error);\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    private setActivity = (activity: Activity) => {\r\n        const user = store.userStore.user;\r\n        if (user) {\r\n            activity.isGoing = activity.attendees!.some(\r\n                a => a.username === user.username\r\n            )\r\n            activity.isHost = activity.hostUsername === user.username;\r\n            activity.host = activity.attendees?.find(x => x.username === activity.hostUsername);\r\n        }\r\n        activity.date = new Date(activity.date!);\r\n        this.activityRegistry.set(activity.id, activity);\r\n    }\r\n\r\n    private getActivity = (id: string) => {\r\n        return this.activityRegistry.get(id);\r\n    }\r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n    createActivity = async (activity: ActivityFormValues) => {\r\n        const user = store.userStore.user;\r\n        const attendee = new Profile(user!);\r\n            try {\r\n                await agent.Activities.create(activity);\r\n                const newActivity = new Activity(activity);\r\n                newActivity.hostUsername = user!.username;\r\n                newActivity.attendees = [attendee];\r\n                this.setActivity(newActivity);\r\n                runInAction(() => {\r\n                    this.selectedActivity = newActivity;\r\n                })   \r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n    }\r\n\r\n    updateActivity = async (activity: ActivityFormValues) => {\r\n        try {\r\n            await agent.Activities.update(activity);\r\n            runInAction(() => {\r\n                if (activity.id) {\r\n                    let updateActivity = {...this.getActivity(activity.id), ...activity}\r\n                    this.activityRegistry.set(activity.id, updateActivity as Activity);\r\n                    this.selectedActivity = updateActivity as Activity;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n            })\r\n        }\r\n    }\r\n\r\n    deleteActivity = async (id: string) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.delete(id);\r\n            runInAction(() => {\r\n                this.activityRegistry.delete(id);\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    updateAttendance = async () => {\r\n        const user = store.userStore.user;\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                if (this.selectedActivity?.isGoing) {\r\n                    this.selectedActivity.attendees = \r\n                        this.selectedActivity.attendees?.filter(a => a.username !== user?.username);\r\n                    this.selectedActivity.isGoing = false;\r\n                } else {\r\n                    const attendee = new Profile(user!);\r\n                    this.selectedActivity?.attendees?.push(attendee);\r\n                    this.selectedActivity!.isGoing = true;\r\n                }\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!)\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    cancelActivityToggle = async () => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    updateAttendeeFollowing = (username: string) => {\r\n        this.activityRegistry.forEach(activity => {\r\n            activity.attendees.forEach(attendee => {\r\n                if (attendee.username === username) {\r\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++;\r\n                    attendee.following = !attendee.following;\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    clearSelectedActivity = () => {\r\n        this.selectedActivity = undefined;\r\n    }\r\n}\r\n\r\n","import { makeAutoObservable, reaction, runInAction } from 'mobx';\r\nimport agent from '../api/agent';\r\nimport { Photo, Profile, UserActivity } from '../models/profile';\r\nimport { store } from './store';\r\n\r\nexport default class ProfileStore {\r\n    profile: Profile | null = null;\r\n    loadingProfile = false;\r\n    uploading = false;\r\n    loading = false;\r\n    followings: Profile[] = [];\r\n    loadingFollowings = false;\r\n    activeTab = 0;\r\n    userActivities: UserActivity[] = [];\r\n    loadingActivities = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.activeTab,\r\n            activeTab => {\r\n                if (activeTab === 3 || activeTab === 4) {\r\n                    const predicate = activeTab === 3 ? 'followers' : 'following';\r\n                    this.loadFollowings(predicate);\r\n                } else {\r\n                    this.followings = [];\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setActiveTab = (activeTab: any) => {\r\n        this.activeTab = activeTab;\r\n    }\r\n\r\n    get isCurrentUser() {\r\n        if (store.userStore.user && this.profile) {\r\n            return store.userStore.user.username === this.profile.username;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    loadProfile = async (username: string) => {\r\n        this.loadingProfile = true;\r\n        try {\r\n            const profile = await agent.Profiles.get(username);\r\n            runInAction(() => {\r\n                this.profile = profile;\r\n                this.loadingProfile = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingProfile = false);\r\n        }\r\n    }\r\n\r\n    uploadPhoto = async (file: Blob) => {\r\n        this.uploading = true;\r\n        try {\r\n            const response = await agent.Profiles.uploadPhoto(file);\r\n            const photo = response.data;\r\n            runInAction(() => {\r\n               if (this.profile) {\r\n                   this.profile.photos?.push(photo);\r\n                   if (photo.isMain && store.userStore.user) {\r\n                       store.userStore.setImage(photo.url);\r\n                       this.profile.image = photo.url;\r\n                   }\r\n               }\r\n               this.uploading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.uploading = false);\r\n        }\r\n    }\r\n\r\n    setMainPhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.setMainPhoto(photo.id);\r\n            store.userStore.setImage(photo.url);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.photos) {\r\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\r\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\r\n                    this.profile.image = photo.url;\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => this.loading = false);\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deletePhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.deletePhoto(photo.id);\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos = this.profile.photos?.filter(p => p.id !== photo.id);\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => this.loading = false);\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    updateProfile = async (profile: Partial<Profile>) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateProfile(profile);\r\n            runInAction(() => {\r\n                if (profile.displayName && profile.displayName !== store.userStore.user?.displayName) {\r\n                    store.userStore.setDisplayName(profile.displayName);\r\n                }\r\n                this.profile = {...this.profile, ...profile as Profile};\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    updateFollowing = async (username: string, following: boolean) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateFollowing(username);\r\n            store.activityStore.updateAttendeeFollowing(username);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.username !== store.userStore.user?.username && this.profile.username === username) {\r\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\r\n                    this.profile.following = !this.profile.following;\r\n                }\r\n                if (this.profile && this.profile.username === store.userStore.user?.username) {\r\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\r\n                }\r\n                this.followings.forEach(profile => {\r\n                    if (profile.username === username) {\r\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\r\n                        profile.following = !profile.following;\r\n                    }\r\n                })\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    loadFollowings = async (predicate: string) => {\r\n        this.loadingFollowings = true;\r\n        try {\r\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate);\r\n            runInAction(() => {\r\n                this.followings = followings;\r\n                this.loadingFollowings = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingFollowings = false);\r\n        }\r\n    }\r\n\r\n    loadUserActivities = async (username: string, predicate?: string) => {\r\n        this.loadingActivities = true;\r\n        try {\r\n            const activities = await agent.Profiles.listActivities(username, predicate!);\r\n            runInAction(() => {\r\n                this.userActivities = activities;\r\n                this.loadingActivities = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loadingActivities = false;\r\n            })\r\n        }\r\n    }\r\n\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { history } from \"../..\";\r\nimport agent from \"../api/agent\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class UserStore {\r\n    user: User | null = null;\r\n    fbAccessToken: string | null = null;\r\n    fbLoading = false;\r\n    refreshTokenTimeout: any;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    get isLoggedIn() {\r\n        return !!this.user;\r\n    }\r\n\r\n    login = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.login(creds);\r\n            store.commonStore.setToken(user.token);\r\n            this.startRefreshTokenTimer(user);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n\r\n    logout = () => {\r\n        store.commonStore.setToken(null);\r\n        window.localStorage.removeItem('jwt');\r\n        this.user = null;\r\n        history.push('/');\r\n    }\r\n\r\n    getUser = async () => {\r\n        try {\r\n            const user = await agent.Account.current();\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            this.startRefreshTokenTimer(user);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    register = async (creds: UserFormValues) => {\r\n        try {\r\n            await agent.Account.register(creds);\r\n            history.push(`/account/registerSuccess?email=${creds.email}`);\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    setImage = (image: string) => {\r\n        if (this.user) this.user.image = image;\r\n    }\r\n\r\n    setDisplayName = (name: string) => {\r\n        if (this.user) this.user.displayName = name;\r\n    }\r\n\r\n    getFacebookLoginStatus = async () => {\r\n        window.FB.getLoginStatus(response => {\r\n            if (response.status === 'connected') {\r\n                this.fbAccessToken = response.authResponse.accessToken;\r\n            }\r\n        })\r\n    }\r\n\r\n    facebookLogin = () => {\r\n        this.fbLoading = true;\r\n        const apiLogin = (accessToken: string) => {\r\n            agent.Account.fbLogin(accessToken).then(user => {\r\n                store.commonStore.setToken(user.token);\r\n                this.startRefreshTokenTimer(user);\r\n                runInAction(() => {\r\n                    this.user = user;\r\n                    this.fbLoading = false;\r\n                })\r\n                history.push('/activities');\r\n            }).catch(error => {\r\n                console.log(error);\r\n                runInAction(() => this.fbLoading = false);\r\n            })\r\n        }\r\n        if (this.fbAccessToken) {\r\n            apiLogin(this.fbAccessToken);\r\n        } else {\r\n            window.FB.login(response => {\r\n                apiLogin(response.authResponse.accessToken);\r\n            }, {scope: 'public_profile,email'})\r\n        }\r\n    }\r\n\r\n    refreshToken = async () => {\r\n        this.stopRefreshTokenTimer();\r\n        try {\r\n            const user = await agent.Account.refreshToken();\r\n            runInAction(() => this.user = user);\r\n            store.commonStore.setToken(user.token);\r\n            this.startRefreshTokenTimer(user);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    private startRefreshTokenTimer(user: User) {\r\n        const jwtToken = JSON.parse(atob(user.token.split('.')[1]));\r\n        const expires = new Date(jwtToken.exp * 1000);\r\n        const timeout = expires.getDate() - Date.now() - (60 * 1000);\r\n        this.refreshTokenTimeout = setTimeout(this.refreshToken, timeout);\r\n    }\r\n\r\n    private stopRefreshTokenTimer() {\r\n        clearTimeout(this.refreshTokenTimeout);\r\n    }\r\n}","import { createContext, useContext } from \"react\";\r\nimport ActivityStore from \"./activityStore\";\r\nimport CommentStore from './commentStore';\r\nimport CommonStore from \"./commonStore\";\r\nimport ModalStore from \"./modalStore\";\r\nimport ProfileStore from \"./profileStore\";\r\nimport UserStore from \"./userStore\";\r\n\r\ninterface Store {\r\n    activityStore: ActivityStore;\r\n    commonStore: CommonStore;\r\n    userStore: UserStore;\r\n    modalStore: ModalStore;\r\n    profileStore: ProfileStore;\r\n    commentStore: CommentStore;\r\n}\r\n\r\nexport const store: Store = {\r\n    activityStore: new ActivityStore(),\r\n    commonStore: new CommonStore(),\r\n    userStore: new UserStore(),\r\n    modalStore: new ModalStore(),\r\n    profileStore: new ProfileStore(),\r\n    commentStore: new CommentStore()\r\n}\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore() {\r\n    return useContext(StoreContext);\r\n}","import { makeAutoObservable, reaction } from \"mobx\";\r\nimport { ServerError } from \"../models/serverError\";\r\n\r\nexport default class CommonStore {\r\n    error: ServerError | null = null;\r\n    token: string | null = window.localStorage.getItem('jwt');\r\n    appLoaded = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.token,\r\n            token => {\r\n                if (token) {\r\n                    window.localStorage.setItem('jwt', token)\r\n                } else {\r\n                    window.localStorage.removeItem('jwt')\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setServerError = (error: ServerError) => {\r\n        this.error = error;\r\n    }\r\n\r\n    setToken = (token: string | null) => {\r\n        this.token = token;\r\n    }\r\n\r\n    setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n}","import { makeAutoObservable } from \"mobx\"\r\n\r\ninterface Modal {\r\n    open: boolean;\r\n    body: JSX.Element | null;\r\n}\r\n\r\nexport default class ModalStore {\r\n    modal: Modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    openModal = (content: JSX.Element) => {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}\r\n","import { HubConnection, HubConnectionBuilder, LogLevel } from '@microsoft/signalr';\r\nimport { makeAutoObservable, runInAction } from 'mobx';\r\nimport { ChatComment } from '../models/comment';\r\nimport { store } from './store';\r\n\r\nexport default class CommentStore {\r\n    comments: ChatComment[] = [];\r\n    hubConnection: HubConnection | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    createHubConnection = (activityId: string) => {\r\n        if (store.activityStore.selectedActivity) {\r\n            this.hubConnection = new HubConnectionBuilder()\r\n                .withUrl(process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\r\n                    accessTokenFactory: () => store.userStore.user?.token!\r\n                })\r\n                .withAutomaticReconnect()\r\n                .configureLogging(LogLevel.Information)\r\n                .build();\r\n\r\n            this.hubConnection.start().catch(error => console.log('Error estabilishing the connection: ', error));\r\n\r\n            this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\r\n                runInAction(() => {\r\n                    comments.forEach(comment => {\r\n                        comment.createdAt = new Date(comment.createdAt + 'Z');\r\n                    })\r\n                    this.comments = comments\r\n                });\r\n            })\r\n\r\n            this.hubConnection.on('ReceiveComment', (comment: ChatComment) => {\r\n                runInAction(() => {\r\n                    comment.createdAt = new Date(comment.createdAt);\r\n                    this.comments.unshift(comment)\r\n                });\r\n            })\r\n        }\r\n    }\r\n\r\n    stopHubConnection = () => {\r\n        this.hubConnection?.stop().catch(error => console.log('Error stopping connection', error));\r\n    }\r\n\r\n    clearComments = () => {\r\n        this.comments = [];\r\n        this.stopHubConnection();\r\n    }\r\n\r\n    addComment = async (values: any) => {\r\n        values.activityId = store.activityStore.selectedActivity?.id;\r\n        try {\r\n            await this.hubConnection?.invoke('SendComment', values);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link, NavLink } from \"react-router-dom\";\r\nimport { Button, Container, Dropdown, Image, Menu } from \"semantic-ui-react\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\nexport default observer(function NavBar() {\r\n    const { userStore: { user, logout, isLoggedIn } } = useStore();\r\n    return (\r\n        <Menu inverted fixed='top'>\r\n            <Container>\r\n                <Menu.Item as={NavLink} to='/' exact header>\r\n                    <img src=\"/assets/logo.png\" alt=\"logo\" style={{ marginRight: '10px' }} />\r\n                    Reactivities\r\n                </Menu.Item>\r\n                {isLoggedIn &&\r\n                <>\r\n                <Menu.Item as={NavLink} to='/activities' name='Activities' />\r\n                <Menu.Item as={NavLink} to='/errors' name='Errors' />\r\n                <Menu.Item>\r\n                    <Button as={NavLink} to='/createActivity' positive content='Create Activity' />\r\n                </Menu.Item>\r\n                <Menu.Item position='right'>\r\n                    <Image src={user?.image || '/assets/user.png'} avatar spaced='right' />\r\n                    <Dropdown pointing='top left' text={user?.displayName} >\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item as={Link} to={`/profiles/${user?.username}`}\r\n                                text='MyProfile' icon='user' />\r\n                            <Dropdown.Item onClick={logout} text='Logout' icon='power' />\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </Menu.Item>\r\n                </>}\r\n            </Container>\r\n        </Menu>\r\n    )\r\n})","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    type?: string;\r\n    label?: string;\r\n}\r\n\r\nexport default function MyTextInput(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <input {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { ErrorMessage, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Button, Form, Header, Label } from \"semantic-ui-react\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nexport default observer (function LoginForm() {\r\n    const {userStore} = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{email: '', password: '', error: null}}\r\n            onSubmit={(values, {setErrors}) => userStore.login(values).catch(error =>\r\n                setErrors({error: error.response.data}))}\r\n        >\r\n            {({handleSubmit, isSubmitting, errors}) => (\r\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off' >\r\n                    <Header as='h2' content='Login to Reactivities' color='teal' textAlign='center' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage\r\n                        name='error' render={() =>\r\n                        <Label style={{marginBottom: 10}} basic color='red' content={errors.error}/>}\r\n                    />\r\n                    <Button loading={isSubmitting} positive content='Login' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})\r\n","import React from \"react\";\r\nimport { Message } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    errors: any;\r\n}\r\n\r\nexport default function ValidationErrors({errors}: Props) {\r\n    return (\r\n        <Message error>\r\n            {errors && (\r\n                <Message.List>\r\n                    {errors.map((err: any, i: any) => (\r\n                        <Message.Item key={i}>{err}</Message.Item>\r\n                    ))}\r\n                </Message.List>\r\n            )}\r\n        </Message>\r\n    )\r\n}","import { ErrorMessage, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Button, Form, Header } from \"semantic-ui-react\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport * as Yup from 'yup';\r\nimport ValidationErrors from \"../errors/ValidationErrors\";\r\n\r\nexport default observer (function RegisterForm() {\r\n    const {userStore} = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{displayName: '', username: '', email: '', password: '', error: null}}\r\n            onSubmit={(values, {setErrors}) => userStore.register(values).catch(error =>\r\n                setErrors({error}))}\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required(),\r\n                username: Yup.string().required(),\r\n                email: Yup.string().email(),\r\n                password: Yup.string().required(),\r\n            })}\r\n        >\r\n            {({handleSubmit, isSubmitting, errors, isValid, dirty}) => (\r\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off' >\r\n                    <Header as='h2' content='Sign up to Reactivities' color='teal' textAlign='center' />\r\n                    <MyTextInput name='displayName' placeholder='Display Name' />\r\n                    <MyTextInput name='username' placeholder='Username' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage\r\n                        name='error' render={() =>\r\n                        <ValidationErrors errors={errors.error} />}\r\n                    />\r\n                    <Button disabled={!isValid || !dirty || isSubmitting}\r\n                        loading={isSubmitting} positive content='Register' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Container, Header, Segment, Image, Button, Divider } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport LoginForm from \"../users/LoginForm\";\r\nimport RegisterForm from \"../users/RegisterForm\";\r\n\r\nexport default observer(function HomePage() {\r\n    const {userStore, modalStore} = useStore();\r\n    return (\r\n        <Segment inverted textAlign='center' vertical className='masthead'>\r\n            <Container text>\r\n                <Header as='h1' inverted>\r\n                    <Image size='massive' src='/assets/logo.png' alt='logo' style={{marginBottom: 12}} />\r\n                    Reactivities\r\n                </Header>\r\n                {userStore.isLoggedIn ? (\r\n                    <>\r\n                        <Header as='h2' inverted content='Welcome to Reactivities' />\r\n                        <Button as={Link} to='/activities' size='huge' inverted>\r\n                            Go to Activities!\r\n                        </Button>\r\n                    </>\r\n                ) : (\r\n                        <>\r\n                            <Button onClick={() => modalStore.openModal(<LoginForm />)} size='huge' inverted>\r\n                                Login!\r\n                            </Button>\r\n                            <Button onClick={() => modalStore.openModal(<RegisterForm />)} size='huge' inverted>\r\n                                Register!\r\n                            </Button>\r\n                            <Divider horizontal inverted>Or</Divider>\r\n                            <Button\r\n                                loading={userStore.fbLoading}\r\n                                size='huge'\r\n                                inverted\r\n                                color='facebook'\r\n                                content='Login with Facebook'\r\n                                onClick={userStore.facebookLogin}\r\n                            />\r\n                        </>\r\n                )}\r\n            </Container>\r\n        </Segment>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from \"react\";\r\nimport Calendar from 'react-calendar';\r\nimport { Header, Menu } from \"semantic-ui-react\";\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nexport default observer(function ActivityFilters() {\r\n    const {activityStore: {predicate, setPredicate}} = useStore();\r\n    return (\r\n        <>\r\n            <Menu vertical size='large' style={{ width: '100%', marginTop: 28 }}>\r\n                <Header icon='filter' attached color='teal' content='Filters' />\r\n                <Menu.Item\r\n                    content='All Activities'\r\n                    active={predicate.has('all')}\r\n                    onClick={() => setPredicate('all', 'true')}\r\n                />\r\n                <Menu.Item\r\n                    content=\"I'm going\"\r\n                    active={predicate.has('isGoing')}\r\n                    onClick={() => setPredicate('isGoing', 'true')}\r\n                />\r\n                <Menu.Item\r\n                    content=\"I'm hosting\"\r\n                    active={predicate.has('isHost')}\r\n                    onClick={() => setPredicate('isHost', 'true')}\r\n                />\r\n            </Menu>\r\n            <Header />\r\n            <Calendar\r\n                onChange={(date: Date) => setPredicate('startDate', date as Date)}\r\n                value={predicate.get('startDate') || new Date()}\r\n            />\r\n        </>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React, { SyntheticEvent } from 'react';\r\nimport { Reveal, Button } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function FollowingButton({ profile }: Props) {\r\n    const {profileStore, userStore} = useStore();\r\n    const {updateFollowing, loading} = profileStore;\r\n\r\n    if (userStore.user?.username === profile.username) return null;\r\n\r\n    function handleFollow(e: SyntheticEvent, username: string) {\r\n        e.preventDefault();\r\n        profile.following ? updateFollowing(username, false) : updateFollowing(username, true);\r\n    }\r\n\r\n    return (\r\n        <Reveal animated='move'>\r\n            <Reveal.Content visible style={{ width: '100%' }}>\r\n                <Button\r\n                    fluid\r\n                    color='teal'\r\n                    content={profile.following ? 'Following' : 'Not following'}\r\n\r\n                />\r\n            </Reveal.Content>\r\n            <Reveal.Content hidden style={{ width: '100%' }}>\r\n                <Button\r\n                    fluid\r\n                    basic\r\n                    color={profile.following ? 'red' : 'green'}\r\n                    content={profile.following ? 'Unfollow' : 'Follow'}\r\n                    loading={loading}\r\n                    onClick={(e) => handleFollow(e, profile.username)}\r\n                />\r\n            </Reveal.Content>\r\n        </Reveal>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Card, Icon, Image } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport FollowButton from './FollowButton';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileCard({profile} : Props) {\r\n    function truncate(str: string | undefined) {\r\n        if (str) {\r\n            return str.length > 40 ? str.substring(0, 37) + '...' : str;\r\n        }\r\n    }\r\n    return (\r\n        <Card as={Link} to={`/profiles/${profile.username}`}>\r\n            <Image src={profile.image || '/assets/user.png'} />\r\n            <Card.Content>\r\n                <Card.Header>{profile.displayName}</Card.Header>\r\n                <Card.Description>{truncate(profile.bio)}</Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Icon name='user' />\r\n                {profile.followersCount} followers\r\n            </Card.Content> \r\n            <FollowButton profile={profile} />\r\n        </Card>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Image, List, Popup } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../../app/models/profile\";\r\nimport ProfileCard from \"../../profiles/ProfileCard\";\r\n\r\ninterface Props {\r\n    attendees: Profile[];\r\n}\r\n\r\nexport default observer(function ActivityListItemAttendee({attendees}: Props) {\r\n\r\n    const styles = {\r\n        borderColor: 'orange',\r\n        borderWidth: 3\r\n    }\r\n\r\n    return (\r\n        <List horizontal>\r\n            {attendees.map(attendee =>(\r\n                <Popup\r\n                    hoverable\r\n                    key={attendee.username}\r\n                    trigger={\r\n                        <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`}>\r\n                    <Image\r\n                        size='mini'\r\n                        circular src={attendee.image || '/assets/user.png'}\r\n                        bordered\r\n                        style={attendee.following ? styles : null}\r\n                    />\r\n                </List.Item>\r\n                    }\r\n                >\r\n                    <Popup.Content>\r\n                        <ProfileCard profile={attendee} />\r\n                    </Popup.Content>\r\n                </Popup>  \r\n            ))}\r\n        </List>\r\n    )\r\n})","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";    \r\nimport { Button, Icon, Item, Label, Segment } from \"semantic-ui-react\";\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport { format } from \"date-fns\";\r\nimport ActivityListItemAttendee from \"./ActivityListItemAttendee\";\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default function ActivityListItem({ activity }: Props) {\r\n\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                {activity.isCancelled && \r\n                    <Label attached='top' color='red' content='Cancelled' style={{textAlign: 'center'}} />\r\n                }\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image style={{marginBottom: 3}} size='tiny' circular src={activity.host?.image || '/assets/user.png'} />\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>\r\n                                {activity.title}\r\n                            </Item.Header>\r\n                            <Item.Description>Hosted by <Link to={`/profiles/${activity.hostUsername}`}>{activity.host?.displayName}</Link></Item.Description>\r\n                            {activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='orange'>\r\n                                        You are hosting this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                                {activity.isGoing && !activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='green'>\r\n                                        You are going to this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Icon name='clock' /> {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n                    <Icon name='marker' /> {activity.venue}\r\n                </span>\r\n            </Segment>\r\n            <Segment secondary>\r\n                <ActivityListItemAttendee attendees={activity.attendees!} />\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span> {activity.description} </span>\r\n                <Button\r\n                    as={Link}\r\n                    to={`/activities/${activity.id}`} \r\n                    color='teal'\r\n                    floated='right'\r\n                    content='View'\r\n                />\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React, { Fragment } from \"react\";\r\nimport { Header } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport ActivityListItem from \"./ActivityListItem\";\r\n\r\nexport default observer(function ActivityList() {\r\n    const { activityStore } = useStore();\r\n    const { groupedActivities } = activityStore;\r\n\r\n    return (\r\n        <>\r\n            {groupedActivities.map(([group, activities]) => (\r\n                <Fragment key={group}>\r\n                    <Header sub color=\"teal\">\r\n                        {group}\r\n                    </Header>\r\n                    {activities.map((activity) => (\r\n                        <ActivityListItem key={activity.id} activity={activity} />\r\n                    ))}\r\n                </Fragment>\r\n            ))}\r\n        </>\r\n    )\r\n})","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};\r\n","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect, useState } from 'react';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport { Grid, Loader } from 'semantic-ui-react';\r\nimport { PagingParams } from '../../../app/models/pagination';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityFilters from './ActivityFilters';\r\nimport ActivityList from './ActivityList';\r\nimport ActivityListItemPlaceholder from './ActivityListItemPlaceHolder';\r\n\r\nexport default observer(function ActivityDashboard() {\r\n    const { activityStore } = useStore();\r\n    const { loadActivities, activityRegistry, setPagingParams, pagination } = activityStore;\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n    function handleGetNext() {\r\n        setLoadingNext(true);\r\n        setPagingParams(new PagingParams(pagination!.currentPage + 1))\r\n        loadActivities().then(() => setLoadingNext(false));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (activityRegistry.size <= 1) loadActivities();\r\n    }, [activityRegistry.size, loadActivities])\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width='10'>\r\n                {activityStore.loadingInitial && !loadingNext ? (\r\n                    <>\r\n                        <ActivityListItemPlaceholder />\r\n                        <ActivityListItemPlaceholder />\r\n                    </>\r\n                ) : (\r\n                        <InfiniteScroll\r\n                            pageStart={0}\r\n                            loadMore={handleGetNext}\r\n                            hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\r\n                            initialLoad={false}\r\n                        >\r\n                            <ActivityList />\r\n                        </InfiniteScroll>\r\n                    )}\r\n            </Grid.Column>\r\n            <Grid.Column width='6'>\r\n                <ActivityFilters />\r\n            </Grid.Column>\r\n            <Grid.Column width={10}>\r\n                <Loader active={loadingNext} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import React from \"react\";\r\nimport { Dimmer, Loader } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    inverted?: boolean;\r\n    content?: string;\r\n}\r\n\r\nexport default function LoadingComponent({inverted = true, content = 'Loading...'}: Props) {\r\n    return (\r\n        <Dimmer active={true} inverted={inverted}>\r\n            <Loader content={content} />\r\n        </Dimmer>\r\n    )\r\n}","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    rows: number;\r\n    label?: string;\r\n}\r\n\r\nexport default function MyTextArea(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <textarea {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label, Select } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    options: any;\r\n    label?: string;\r\n}\r\n\r\nexport default function MySelectInput(props: Props) {\r\n    const [field, meta, helpers] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <Select \r\n                clearable\r\n                options={props.options}\r\n                value={field.value || null}\r\n                onChange={(e, d) => helpers.setValue(d.value)}\r\n                onBlur={() => helpers.setTouched(true)}\r\n                placeholder={props.placeholder}\r\n                />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","export const categoryOptions = [\r\n    {text: 'Drinks', value: 'drinks'},\r\n    {text: 'Culture', value: 'culture'},\r\n    {text: 'Film', value: 'film'},\r\n    {text: 'Food', value: 'food'},\r\n    {text: 'Music', value: 'music'},\r\n    {text: 'Travel', value: 'travel'},\r\n]","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\nimport DatePicker, { ReactDatePickerProps } from 'react-datepicker';\r\n\r\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>) {\r\n    const [field, meta, helpers] = useField(props.name!);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <DatePicker\r\n                {...field}\r\n                {...props}\r\n                selected={(field.value && new Date(field.value)) || null}\r\n                onChange={value => helpers.setValue(value)}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Link, useHistory, useParams } from 'react-router-dom';\r\nimport { Button, Header, Segment } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from '../../../app/common/form/MyTextInput';\r\nimport MyTextArea from '../../../app/common/form/MyTextArea';\r\nimport MySelectInput from '../../../app/common/form/MySelectInput';\r\nimport { categoryOptions } from '../../../app/common/options/categoryOptions';\r\nimport MyDateInput from '../../../app/common/form/MyDateInput';\r\nimport { ActivityFormValues } from '../../../app/models/activity';\r\n\r\nexport default observer(function ActivityForm() {\r\n    const history = useHistory();\r\n    const { activityStore } = useStore();\r\n    const {\r\n        createActivity,\r\n        updateActivity,\r\n        loadActivity,\r\n        loadingInitial\r\n    } = activityStore;\r\n    const { id } = useParams<{ id: string }>();\r\n\r\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required('The activity title is required'),\r\n        description: Yup.string().required('The activity description is required'),\r\n        category: Yup.string().required(),\r\n        date: Yup.string().required('Date is required').nullable(),\r\n        venue: Yup.string().required(),\r\n        city: Yup.string().required(),\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (id) loadActivity(id).then((activity) => setActivity(new ActivityFormValues(activity)));\r\n    }, [id, loadActivity]);\r\n\r\n    function handleFormSubmit(activity: ActivityFormValues) {\r\n        if (!activity.id) {\r\n            let newActivity = {\r\n                ...activity,\r\n                id: uuid()\r\n            };\r\n            createActivity(newActivity).then(() =>\r\n                history.push(`/activities/${newActivity.id}`))\r\n        } else {\r\n            updateActivity(activity).then(() =>\r\n                history.push(`/activities/${activity.id}`))\r\n        }\r\n    }\r\n\r\n    if (loadingInitial) return <LoadingComponent content='Loading activity...' />;\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Header content='Activity Details' sub color='teal' />\r\n            <Formik\r\n                validationSchema={validationSchema}\r\n                enableReinitialize\r\n                initialValues={activity}\r\n                onSubmit={(values) => handleFormSubmit(values)}\r\n            >\r\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\r\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                        <MyTextInput name='title' placeholder='Title' />\r\n                        <MyTextArea rows={3} placeholder='Description' name='description' />\r\n                        <MySelectInput\r\n                            options={categoryOptions}\r\n                            placeholder='Category'\r\n                            name='category'\r\n                        />\r\n                        <MyDateInput\r\n                            placeholderText='Date'\r\n                            name='date'\r\n                            showTimeSelect\r\n                            timeCaption='time'\r\n                            dateFormat='MMMM d, yyyy h:mm aa'\r\n                        />\r\n                        <Header content='Location Details' sub color='teal' />\r\n                        <MyTextInput placeholder='City' name='city' />\r\n                        <MyTextInput placeholder='Venue' name='venue' />\r\n                        <Button\r\n                            disabled={isSubmitting || !dirty || !isValid}\r\n                            loading={isSubmitting}\r\n                            floated='right'\r\n                            positive\r\n                            type='submit'\r\n                            content='Submit'\r\n                        />\r\n                        <Button\r\n                            as={Link}\r\n                            to='/activities'\r\n                            floated='right'\r\n                            type='button'\r\n                            content='Cancel'\r\n                        />\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </Segment>\r\n    );\r\n});\r\n","import { Formik, Form, Field, FieldProps } from 'formik'\r\nimport { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Segment, Header, Comment, Loader } from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/store';\r\nimport * as Yup from 'yup';\r\nimport { formatDistanceToNow } from 'date-fns'\r\n\r\ninterface Props {\r\n    activityId: string;\r\n}\r\n\r\nexport default observer(function ActivityDetailedChat({activityId}: Props) {\r\n    const {commentStore} = useStore();\r\n\r\n    useEffect(() => {\r\n        if (activityId) {\r\n            commentStore.createHubConnection(activityId);\r\n        }\r\n        return () => {\r\n            commentStore.clearComments();\r\n        }\r\n    }, [commentStore, activityId]);\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{ border: 'none' }}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n            <Formik\r\n                        onSubmit={(values, { resetForm }) =>\r\n                            commentStore.addComment(values).then(() => resetForm())}\r\n                        initialValues={{ body: '' }}\r\n                        validationSchema={Yup.object({\r\n                            body: Yup.string().required()\r\n                        })}\r\n                    >\r\n                        {({ isSubmitting, isValid, handleSubmit }) => (\r\n                            <Form className='ui form'>\r\n                                <Field name='body'>\r\n                                    {(props: FieldProps) => (\r\n                                        <div style={{position: 'relative'}}>\r\n                                            <Loader active={isSubmitting} />\r\n                                            <textarea\r\n                                                placeholder='Enter your comment (Enter to submit, SHIFT + Enter for new line)'\r\n                                                rows={2}\r\n                                                {...props.field}\r\n                                                onKeyPress={e => {\r\n                                                    if (e.key === 'Enter' && e.shiftKey) {\r\n                                                        return;\r\n                                                    }\r\n                                                    if (e.key === 'Enter' && !e.shiftKey) {\r\n                                                        e.preventDefault();\r\n                                                        isValid && handleSubmit();\r\n                                                    }\r\n                                                }}\r\n                                            />\r\n                                        </div>\r\n                                    )}\r\n                                </Field>\r\n                            </Form>\r\n                        )}\r\n                    </Formik>\r\n\r\n                <Comment.Group>\r\n                    {commentStore.comments.map(comment => (\r\n                    <Comment key={comment.id}>\r\n                        <Comment.Avatar src={comment.image ||'/assets/user.png'} />\r\n                        <Comment.Content>\r\n                            <Comment.Author as={Link} to={`/profiles/${comment.username}`}>\r\n                                {comment.displayName}\r\n                            </Comment.Author>\r\n                            <Comment.Metadata>\r\n                                <div>{formatDistanceToNow(comment.createdAt)} ago</div>\r\n                            </Comment.Metadata>\r\n                            <Comment.Text style={{whiteSpace: 'pre-wrap'}}>{comment.body}</Comment.Text>\r\n                        </Comment.Content>\r\n                    </Comment>\r\n                    ))}\r\n\r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n    )\r\n})\r\n","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Item, Segment, Image, Label } from 'semantic-ui-react'\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedHeader({ activity }: Props) {\r\n    const { activityStore: { updateAttendance, loading, cancelActivityToggle } } = useStore();\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{ padding: '0' }}>\r\n                {activity.isCancelled &&\r\n                    <Label style={{ position: 'absolute', zIndex: 1000, left: -14, top: 20 }}\r\n                        ribbon color='red' content='Cancelled' />\r\n                }\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle} />\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{ color: 'white' }}\r\n                                />\r\n                                <p>{format(activity.date!, 'dd MMM yyyy')}</p>\r\n                                <p>\r\n                                    Hosted by <strong><Link to={`/profiles/${activity.host?.username}`}>{activity.host?.displayName}</Link></strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {activity.isHost ? (\r\n                    <>\r\n                        <Button\r\n                            color={activity.isCancelled ? 'green' : 'red'}\r\n                            floated='left'\r\n                            basic\r\n                            content={activity.isCancelled ? 'Re-activate Activity' : 'Cancel Activity'}\r\n                            onClick={cancelActivityToggle}\r\n                            loading={loading}\r\n                        />\r\n                        <Button as={Link}\r\n                            disabled={activity.isCancelled}\r\n                            to={`/manage/${activity.id}`}\r\n                            color='orange'\r\n                            floated='right'>\r\n                            Manage Event\r\n                        </Button>\r\n                    </>\r\n                ) : activity.isGoing ? (\r\n                    <Button loading={loading} onClick={updateAttendance}>Cancel attendance</Button>\r\n                ) : (\r\n                    <Button disabled={activity.isCancelled}\r\n                        loading={loading} onClick={updateAttendance} color='teal'>\r\n                            Join Activity\r\n                    </Button>\r\n                )}\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})\r\n\r\n\r\n\r\n\r\n","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Segment, Grid, Icon } from 'semantic-ui-react'\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport {format} from 'date-fns'\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({ activity }: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info' />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal' />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <span>\r\n                            {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n                        </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal' />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})\r\n","import React from 'react'\r\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Activity } from '../../../app/models/activity'\r\n\r\ninterface Props {\r\n    activity: Activity;\r\n}\r\n\r\nexport default observer(function ActivityDetailedSidebar({ activity: {attendees, host} }: Props) {\r\n    if (!attendees) return null;\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                {attendees.length} {attendees.length === 1 ? 'Person' : 'People'} going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {attendees.map((attendee) => (\r\n                        <Item style={{ position: 'relative' }} key={attendee.username}>\r\n                            {attendee.username === host?.username &&\r\n                                <Label\r\n                                    style={{ position: 'absolute' }}\r\n                                    color='orange'\r\n                                    ribbon='right'\r\n                                >\r\n                                    Host\r\n                                </Label>}\r\n                            <Image size='tiny' src={attendee.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Item.Header as='h3'>\r\n                                    <Link to={`/profiles/${attendee.username}`}>\r\n                                        {attendee.displayName}\r\n                                    </Link>\r\n                                </Item.Header>\r\n                                {attendee.following &&\r\n                                <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>}\r\n                            </Item.Content>\r\n                        </Item>\r\n                    ))}\r\n                </List>\r\n            </Segment>\r\n        </>\r\n    );\r\n});\r\n\r\n","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Grid, GridColumn } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport ActivityDetailedChat from './ActivityDetailedChats';\r\nimport ActivityDetailedHeader from './ActivityDetailedHeader';\r\nimport ActivityDetailedInfo from './ActivityDetailedInfo';\r\nimport ActivityDetailedSidebar from './ActivityDetailedSidebar';\r\n\r\nexport default observer (function ActivityDetails() {\r\n    const {activityStore} = useStore();\r\n    const {selectedActivity: activity, loadActivity, loadingInitial, clearSelectedActivity } = activityStore;\r\n    const {id} = useParams<{id: string}>();\r\n\r\n    useEffect(() => {\r\n        if (id) loadActivity(id);\r\n        return () => clearSelectedActivity();\r\n    }, [id, loadActivity, clearSelectedActivity]);\r\n\r\n    if (loadingInitial || !activity) return <LoadingComponent />;\r\n    \r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <ActivityDetailedHeader activity={activity} />\r\n                <ActivityDetailedInfo activity={activity} />\r\n                <ActivityDetailedChat activityId={activity.id} />\r\n            </Grid.Column>\r\n            <GridColumn width={6}>\r\n                <ActivityDetailedSidebar activity={activity}/>\r\n            </GridColumn>\r\n        </Grid>\r\n    )\r\n})","import React from 'react';\r\nimport {Button, Header, Segment} from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport { useState } from 'react';\r\nimport ValidationErrors from './ValidationErrors';\r\n\r\nexport default function TestErrors() {\r\n    const baseUrl = process.env.REACT_APP_API_URL;\r\n    const [errors, setErrors] = useState(null);\r\n\r\n    function handleNotFound() {\r\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err));\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n            {errors &&\r\n                <ValidationErrors errors={errors} />\r\n            }\r\n        </>\r\n    )\r\n}","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Header, Icon, Segment } from \"semantic-ui-react\";\r\n\r\nexport default function NotFound() {\r\n    return (\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name='search' />\r\n                Oops - we've looked everywhere and could not find this.\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to='/activities' primary>\r\n                    Return to activities page\r\n                </Button>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Container, Header, Segment } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nexport default observer(function ServerError() {\r\n    const {commonStore} = useStore();\r\n    return (\r\n        <Container>\r\n            <Header as='h1' content='Server error' />\r\n            <Header sub as='h5' color='red' content={commonStore.error?.message}/>\r\n            {commonStore.error?.details &&\r\n                <Segment>\r\n                    <Header as='h4' content='Stack trace' color='teal' />\r\n                    <code style={{marginTop: '10px'}} >{commonStore.error.details}</code>\r\n                </Segment>\r\n            }\r\n        </Container>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Modal } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../stores/store\";\r\n\r\nexport default observer(function ModalContainer() {\r\n    const {modalStore} = useStore();\r\n\r\n    return (\r\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini' >\r\n            <Modal.Content>\r\n                {modalStore.modal.body}\r\n            </Modal.Content>\r\n        </Modal>\r\n    )\r\n})","import { Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Button } from 'semantic-ui-react';\r\nimport MyTextArea from '../../app/common/form/MyTextArea';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport { useStore } from '../../app/stores/store';\r\nimport * as Yup from 'yup';\r\n\r\ninterface Props {\r\n    setEditMode: (editMode: boolean) => void;\r\n}\r\n\r\nexport default observer(function ProfileEditForm({setEditMode}: Props) {\r\n    const {profileStore: {profile, updateProfile}} =useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{displayName: profile?.displayName, bio: profile?.bio}}\r\n            onSubmit={values => {\r\n                updateProfile(values).then(() => {\r\n                    setEditMode(false);\r\n                })\r\n            }}\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required()\r\n            })}\r\n        >\r\n            {({isSubmitting, isValid, dirty}) => (\r\n                <Form className='ui form'>\r\n                    <MyTextInput\r\n                        placeholder='Display Name'\r\n                        name='displayName'\r\n                    />\r\n                    <MyTextArea\r\n                        rows={3}\r\n                        placeholder='Add your bio'\r\n                        name='bio'\r\n                    />\r\n                    <Button\r\n                        positive\r\n                        type='submit'\r\n                        loading={isSubmitting}\r\n                        content='Update profile'\r\n                        floated='right'\r\n                        disabled={!isValid || !dirty}\r\n                    />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React, { useState } from 'react';\r\nimport { Button, Grid, Header, Tab } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileEditForm from './ProfileEditForm';\r\n\r\nexport default observer(function ProfileAbout() {\r\n    const {profileStore} = useStore();\r\n    const {isCurrentUser, profile} = profileStore;\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width='16'>\r\n                    <Header floated='left' icon='user' content={`About ${profile?.displayName}`} />\r\n                    {isCurrentUser && (\r\n                        <Button\r\n                            floated='right'\r\n                            basic\r\n                            content={editMode ? 'Cancel' : 'Edit Profile'}\r\n                            onClick={() => setEditMode(!editMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width='16'>\r\n                    {editMode ? <ProfileEditForm setEditMode={setEditMode} /> :\r\n                    <span style={{whiteSpace: 'pre-wrap'}}>{profile?.bio}</span>}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React, { SyntheticEvent, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, Grid, Header, Tab, Image, TabProps } from 'semantic-ui-react';\r\nimport { UserActivity } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nconst panes = [\r\n    { menuItem: 'Future Events', pane: { key: 'future' } },\r\n    { menuItem: 'Past Events', pane: { key: 'past' } },\r\n    { menuItem: 'Hosting', pane: { key: 'hosting' } }\r\n];\r\n\r\nexport default observer(function ProfileActivities() {\r\n    const { profileStore } = useStore();\r\n    const {\r\n        loadUserActivities,\r\n        profile,\r\n        loadingActivities,\r\n        userActivities\r\n    } = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadUserActivities(profile!.username);\r\n    }, [loadUserActivities, profile]);\r\n\r\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\r\n        loadUserActivities(profile!.username, panes[data.activeIndex as number].pane.key);\r\n    };\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingActivities}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='calendar' content={'Activities'} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Tab\r\n                        panes={panes}\r\n                        menu={{ secondary: true, pointing: true }}\r\n                        onTabChange={(e, data) => handleTabChange(e, data)}\r\n                    />\r\n                    <br />\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {userActivities.map((activity: UserActivity) => (\r\n                            <Card\r\n                                as={Link}\r\n                                to={`/activities/${activity.id}`}\r\n                                key={activity.id}\r\n                            >\r\n                                <Image\r\n                                    src={`/assets/categoryImages/${activity.category}.jpg`}\r\n                                    style={{ minHeight: 100, objectFit: 'cover' }}\r\n                                />\r\n                                <Card.Content>\r\n                                    <Card.Header textAlign='center'>{activity.title}</Card.Header>\r\n                                    <Card.Meta textAlign='center'>\r\n                                        <div>{format(new Date(activity.date), 'do LLL')}</div>\r\n                                        <div>{format(new Date(activity.date), 'h:mm a')}</div>\r\n                                    </Card.Meta>\r\n                                </Card.Content>\r\n                            </Card>\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n});","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Card, Grid, Header, Tab } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileCard from './ProfileCard';\r\n\r\nexport default observer(function ProfileFollowings() {\r\n    const {profileStore} = useStore();\r\n    const {profile, followings, loadingFollowings, activeTab} = profileStore;\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingFollowings}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header\r\n                        floated='left'\r\n                        icon='user'\r\n                        content={activeTab === 3 ? `People following ${profile?.displayName}` : `People ${profile?.displayName} is following`}\r\n                    />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {followings.map(profile => (\r\n                            <ProfileCard key={profile.username} profile={profile} />\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import React from 'react';\r\nimport { Cropper } from 'react-cropper';\r\nimport 'cropperjs/dist/cropper.css';\r\n\r\ninterface Props {\r\n    imagePreview: string;\r\n    setCropper: (cropper: Cropper) => void;\r\n}\r\n\r\nexport default function PhotoWidgetCropper({imagePreview, setCropper}: Props) {\r\n    return (\r\n        <Cropper\r\n            src={imagePreview}\r\n            style={{height: 200, width: '100%'}}\r\n            initialAspectRatio={1}\r\n            aspectRatio={1}\r\n            preview='.img-preview'\r\n            guides={false}\r\n            viewMode={1}\r\n            autoCropArea={1}\r\n            background={false}\r\n            onInitialized={cropper => setCropper(cropper)}\r\n        />\r\n    )\r\n}","import React, { useCallback } from 'react'\r\nimport { useDropzone } from 'react-dropzone'\r\nimport { Header, Icon } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n    setFiles: (files: any) => void;\r\n}\r\n\r\nexport default function PhotoWidgetDropzone({ setFiles }: Props) {\r\n    const dzStyles = {\r\n        border: 'dashed 3px #eee',\r\n        borderColor: '#eee',\r\n        borderRadius: '5px',\r\n        paddingTop: '30px',\r\n        textAlign: 'center' as 'center',\r\n        height: 200\r\n    }\r\n\r\n    const dzActive = {\r\n        borderColor: 'green'\r\n    }\r\n\r\n    const onDrop = useCallback(acceptedFiles => {\r\n        setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\r\n            preview: URL.createObjectURL(file)\r\n        })))\r\n    }, [setFiles])\r\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop })\r\n\r\n    return (\r\n        <div {...getRootProps()} style={isDragActive ? {...dzStyles, ...dzActive} : dzStyles} >\r\n            <input {...getInputProps()} />\r\n            <Icon name='upload' size='huge' />\r\n            <Header content='Drop image here' />\r\n        </div>\r\n    )\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { Button, Grid, Header } from 'semantic-ui-react';\r\nimport PhotoWidgetCropper from './PhotoWidgetCropper';\r\nimport PhotoWidgetDropzone from './PhotoWidgetDropzone';\r\n\r\ninterface Props {\r\n    loading: boolean;\r\n    uploadPhoto: (file: Blob) => void;\r\n}\r\n\r\nexport default function PhotoUploadWidget({loading, uploadPhoto}: Props) {\r\n    const [files, setFiles] = useState<any>([]);\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n\r\n    function onCrop() {\r\n        if (cropper) {\r\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview))\r\n        }\r\n    }, [files])\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 1 - Add Photo' />\r\n                <PhotoWidgetDropzone setFiles={setFiles} />\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 2 - Resize image' />\r\n                {files && files.length > 0 && (\r\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 3 - Preview & Upload' />\r\n                {files && files.length > 0 &&\r\n                    <>\r\n                        <div className='img-preview' style={{ minHeight: 200, overflow: 'hidden' }} />\r\n                        <Button.Group widths={2}>\r\n                            <Button loading={loading} onClick={onCrop} positive icon='check' />\r\n                            <Button disable={loading} onClick={() => setFiles([])} icon='close' />\r\n                        </Button.Group>\r\n                    </>}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React, { SyntheticEvent, useState } from 'react';\r\nimport { Button, Card, Grid, Header, Image, Tab } from 'semantic-ui-react';\r\nimport PhotoUploadWidget from '../../app/common/imageUpload/PhotoUploadWidget';\r\nimport { Photo, Profile } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfilePhotos({ profile }: Props) {\r\n    const { profileStore: { isCurrentUser, uploadPhoto,\r\n        uploading, loading, setMainPhoto, deletePhoto } } = useStore();\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    const [target, setTarget] = useState('');\r\n\r\n    function handlePhotoUpload(file: Blob) {\r\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\r\n    }\r\n\r\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    }\r\n\r\n    function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        deletePhoto(photo);\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='image' content='Photos' />\r\n                    {isCurrentUser && (\r\n                        <Button\r\n                            floated='right'\r\n                            basic\r\n                            content={addPhotoMode ? 'Cancel' : 'Add Photo'}\r\n                            onClick={() => setAddPhotoMode(!addPhotoMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {addPhotoMode ? (\r\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading} />\r\n                    ) : (\r\n                        <Card.Group itemsPerRow={5}>\r\n                            {profile.photos?.map(photo => (\r\n                                <Card key={photo.id}>\r\n                                    <Image src={photo.url} />\r\n                                    {isCurrentUser && (\r\n                                        <Button.Group fluid widths={2} >\r\n                                            <Button\r\n                                                basic\r\n                                                color='green'\r\n                                                content='Main'\r\n                                                name={'main' + photo.id}\r\n                                                disabled={photo.isMain}\r\n                                                loading={target === 'main' + photo.id && loading}\r\n                                                onClick={e => handleSetMainPhoto(photo, e)}\r\n                                            />\r\n                                            <Button\r\n                                                basic\r\n                                                color='red'\r\n                                                icon='trash'\r\n                                                loading={target === photo.id && loading}\r\n                                                onClick={e => handleDeletePhoto(photo, e)}\r\n                                                disabled={photo.isMain}\r\n                                                name={photo.id}\r\n                                            />\r\n                                        </Button.Group>\r\n                                    )}\r\n                                </Card>\r\n                            ))}\r\n                        </Card.Group>\r\n                    )}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Tab } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileAbout from './ProfileAbout';\r\nimport ProfileActivities from './ProfileActivities';\r\nimport ProfileFollowings from './ProfileFollowings';\r\nimport ProfilePhotos from './ProfilePhotos';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileContent({profile}: Props) {\r\n    const {profileStore} = useStore();\r\n\r\n    const panes = [\r\n        {menuItem: 'About', render: () => <ProfileAbout />},\r\n        {menuItem: 'Photos', render: () => <ProfilePhotos profile={profile} />},\r\n        {menuItem: 'Events', render: () => <ProfileActivities />},\r\n        {menuItem: 'Followers', render: () => <ProfileFollowings />},\r\n        {menuItem: 'Following', render: () => <ProfileFollowings />},\r\n    ];\r\n\r\n    return (\r\n        <Tab\r\n            menu={{fluid: true, vertical: true}}\r\n            menuPosition='right'\r\n            panes={panes}\r\n            onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\r\n        />\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Divider, Grid, Header, Item, Segment, Statistic } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport FollowButton from './FollowButton';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileHeader({profile}: Props) {\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avatar size='small' src={profile.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Header as='h1' content={profile.displayName} />\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <Statistic.Group widths={2}>\r\n                        <Statistic label='Followers' value={profile.followersCount} />\r\n                        <Statistic label='Following' value={profile.followingCount} />\r\n                    </Statistic.Group>\r\n                    <Divider />\r\n                    <FollowButton profile={profile} />\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileContent from \"./ProfileContent\";\r\nimport ProfileHeader from \"./ProfileHeader\";\r\n\r\nexport default observer(function ProfilePage() {\r\n    const {username} = useParams<{username: string}>();\r\n    const {profileStore} = useStore();\r\n    const {loadingProfile, loadProfile, profile, setActiveTab} = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadProfile(username); \r\n        return () => {\r\n            setActiveTab(0);\r\n        }\r\n    }, [loadProfile, username, setActiveTab])\r\n\r\n    if (loadingProfile) return <LoadingComponent content='Loading profile...' />\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                {profile &&\r\n                    <>\r\n                        <ProfileHeader profile={profile} />\r\n                        <ProfileContent profile={profile} />\r\n                    </>}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import React from 'react';\r\nimport { Redirect, Route, RouteComponentProps, RouteProps } from 'react-router-dom';\r\nimport { useStore } from '../stores/store';\r\n\r\ninterface Props extends RouteProps {\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\r\n}\r\n\r\n\r\nexport default function PrivateRoute({component: Component, ...rest}: Props) {\r\n    const {userStore: {isLoggedIn}} = useStore();\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' />}\r\n        />\r\n    )\r\n}","import { useLocation } from 'react-router-dom';\r\n\r\nexport default function useQuery() {\r\n    return new URLSearchParams(useLocation().search);\r\n}","import React from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react';\r\nimport agent from '../../app/api/agent';\r\nimport useQuery from '../../app/common/util/hooks';\r\n\r\nexport default function RegisterSuccess() {\r\n    const email = useQuery().get('email') as string;\r\n\r\n    function handleConfirmEmailResend() {\r\n        agent.Account.resendEmailConfirm(email).then(() => {\r\n            toast.success('Verification email resent - please check you email');\r\n        }).catch(error => console.log(error));\r\n    }\r\n\r\n    return (\r\n        <Segment placeholder textAlign='center'>\r\n            <Header icon color='green'>\r\n                <Icon name='check' />\r\n                Successfully registered!\r\n            </Header>\r\n            <p>Please check your email (including junk email) for the verification email</p>\r\n            {email &&\r\n                <>\r\n                    <p>Didn't receive the email? Click the below button to resend</p>\r\n                    <Button\r\n                        primary\r\n                        onClick={handleConfirmEmailResend}\r\n                        content='Resend email'\r\n                        size='huge'\r\n                    />\r\n                </>\r\n            }\r\n        </Segment>\r\n    )\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react';\r\nimport agent from '../../app/api/agent';\r\nimport useQuery from '../../app/common/util/hooks';\r\nimport { useStore } from '../../app/stores/store';\r\nimport LoginForm from './LoginForm';\r\n\r\nexport default function ConfirmEmail() {\r\n    const {modalStore} = useStore();\r\n    const email = useQuery().get('email') as string;\r\n    const token = useQuery().get('token') as string;\r\n\r\n    const Status = {\r\n        Verifying: 'Verifying',\r\n        Failed: 'Failed',\r\n        Success: 'Success'\r\n    }\r\n\r\n    const [status, setStatus] = useState(Status.Verifying);\r\n\r\n    function handleConfirmEmailResend() {\r\n        agent.Account.resendEmailConfirm(email).then(() => {\r\n            toast.success('Verification email resent - please check you email');\r\n        }).catch(error => console.log(error));\r\n    }\r\n\r\n    useEffect(() => {\r\n        agent.Account.verifyEmail(token, email).then(() => {\r\n            setStatus(Status.Success)\r\n        }).catch(() => {\r\n            setStatus(Status.Failed)\r\n        })\r\n    }, [Status.Verifying, Status.Failed, Status.Success, token, email])\r\n\r\n    function getBody() {\r\n        switch (status) {\r\n            case Status.Verifying:\r\n                return <p>Verifying...</p>;\r\n            case Status.Failed:\r\n                return (\r\n                    <div>\r\n                        <p>Verification failed. You can try resending the verify link to your email</p>\r\n                        <Button\r\n                            primary\r\n                            onClick={handleConfirmEmailResend}\r\n                            size='huge'\r\n                            content='Resend email'\r\n                        />\r\n                    </div>\r\n                );\r\n            case Status.Success:\r\n                return (\r\n                    <div>\r\n                        <p>Email has been verified - you can now login</p>\r\n                        <Button\r\n                            primary\r\n                            onClick={() => modalStore.openModal(<LoginForm />)}\r\n                            size='huge'\r\n                            content='Login'\r\n                        />\r\n                    </div>\r\n                );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Segment placeholder textAlign='center'>\r\n            <Header icon>\r\n                <Icon name='envelope' />\r\n                Email verification\r\n            </Header>\r\n            <Segment.Inline>\r\n                {getBody()}\r\n            </Segment.Inline>\r\n        </Segment>\r\n    )\r\n}","import React, { useEffect } from 'react';\nimport { Container } from 'semantic-ui-react';\nimport NavBar from './NavBar';\nimport { observer } from 'mobx-react-lite';\nimport { Route, Switch, useLocation } from 'react-router-dom';\nimport HomePage from '../../features/home/HomePage';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\nimport ActivityForm from '../../features/activities/form/ActivityForm';\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\nimport TestErrors from '../../features/errors/TestError';\nimport { ToastContainer } from 'react-toastify';\nimport NotFound from '../../features/errors/NotFound';\nimport ServerError from '../../features/errors/ServerError';\nimport { useStore } from '../stores/store';\nimport LoadingComponent from './LoadingComponent';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport ProfilePage from '../../features/profiles/ProfilePage';\nimport PrivateRoute from './PrivateRoute';\nimport RegisterSuccess from '../../features/users/RegisterSuccess';\nimport ConfirmEmail from '../../features/users/ConfirmEmail';\n\nfunction App() {\n\n  const location = useLocation();\n  const {commonStore, userStore} = useStore();\n\n  useEffect(() => {\n    if (commonStore.token) {\n      userStore.getUser().finally(() => commonStore.setAppLoaded());\n    } else {\n      userStore.getFacebookLoginStatus().then(() => commonStore.setAppLoaded());\n    }\n  }, [commonStore, userStore])\n\n  if (!commonStore.appLoaded) return <LoadingComponent content='Loading app...' />\n\n  return (\n    <>\n        <ToastContainer position='bottom-right' hideProgressBar/>\n        <ModalContainer  />\n        <Route exact path='/' component={HomePage} />\n        <Route\n          path={'/(.+)'}\n          render={() => (\n            <>\n              <NavBar />\n              <Container style={{marginTop: '7em'}}>\n                <Switch>\n                  <PrivateRoute exact path='/activities' component={ActivityDashboard} />\n                  <PrivateRoute path='/activities/:id' component={ActivityDetails} />\n                  <PrivateRoute key={location.key} path={['/createActivity', '/manage/:id']} component={ActivityForm} />\n                  <PrivateRoute path='/profiles/:username' component={ProfilePage} />\n                  <PrivateRoute path='/errors' component={TestErrors} />\n                  <Route path='/server-error' component={ServerError} />\n                  <Route path='/account/registerSuccess' component={RegisterSuccess} />\n                  <Route path='/account/verifyEmail' component={ConfirmEmail} />\n                  <Route component={NotFound} />\n                </Switch>\n              </Container> \n            </>\n          )}\n        />\n    </>\n  );\n}\n\nexport default observer(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n  const { pathname } = useLocation();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [pathname]);\r\n\r\n  return null;\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-calendar/dist/Calendar.css';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport './app/layout/styles.css';\nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport { store, StoreContext } from './app/stores/store';\nimport { Router } from 'react-router-dom';\nimport {createBrowserHistory} from 'history';\nimport ScrollToTop from './app/layout/ScrollToTop';\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n  <StoreContext.Provider value={store}>\n    <Router history={history}>\n      <ScrollToTop />\n      <App />\n    </Router>\n  </StoreContext.Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}